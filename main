import torch
from diffusers import StableDiffusionPipeline
from PIL import Image
import gradio as gr
from fastapi import FastAPI
from fastapi.responses import Response
import io

# Load the pipeline
pipeline = StableDiffusionPipeline.from_pretrained(
    "stabilityai/stable-diffusion-2-1", torch_dtype=torch.float16
)

# Running the inference on GPU with cuda enabled
pipeline = pipeline.to('cuda')

def generate_image(prompt):
    image = pipeline(prompt=prompt).images[0]
    return image

# Create Gradio interface
iface = gr.Interface(
    fn=generate_image,
    inputs="text",
    outputs="image",
    title="3D Image Generator powered by AI",
    description="Enter a prompt to generate an image"
)

# Get the FastAPI app from Gradio
app = iface.app
@app.get("/generate")
async def api_generate(prompt: str):
    image = generate_image(prompt)

    # Convert PIL image to bytes
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr = img_byte_arr.getvalue()

    return Response(content=img_byte_arr, media_type="image/png")

# Launch the interface
iface.launch()
